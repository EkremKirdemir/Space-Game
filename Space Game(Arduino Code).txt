#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define LATCH 2
#define DATA 3
#define CLK 4
#define MR 5
using namespace std;
int potPin = A0,potValue = 0,counter = 0,planeLoc = 4,immuneCt = 0,delayCt=0,opt=1,ldrValue=0;
int health = 3, bullet = 3,totalCt = 0,gameMode = 2,score=0,shootButton = 30,selectButton = 23,downButton = 24,upButton=25,buzzer =6;
bool isImmune = false;

const  int led[]={13,12,11,10,9,8};
byte rakamlar[10]=
{
  63,6,91,79,102,109,125,7,127,111
};
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
void firstScreen();
void putdownLed()
{
   for(int i=0;i<6;i++)
  {
  digitalWrite(led[i],LOW);
  }

 
}
void displayLed(int health,int bullet)
{
   for(int i=0;i<health;i++)
  {
  digitalWrite(led[i],HIGH);
  }

 for(int i=3;i<bullet+3;i++)
  {
  digitalWrite(led[i],HIGH);
}
}
void displayScore(int score)
{
  if(score>1000)
  score=score%1000;
  digitalWrite(LATCH, LOW);
  byte yuzler= score/100;
  score = score % 100;
  byte onlar = score/10;
  byte birler = score%10;
  shiftOut(DATA,CLK,MSBFIRST, rakamlar[yuzler]);
  shiftOut(DATA,CLK,MSBFIRST, rakamlar[onlar]);
  shiftOut(DATA,CLK,MSBFIRST, rakamlar[birler]);

      digitalWrite(LATCH, HIGH);

}
void printMatrix(int** matrix, int rows, int cols) {
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            switch(matrix[i][j]){
              case 1:
                display.fillRect((i*8)+3,59-(j*8), 2, 2, WHITE);
                break;
              case 2:
                display.fillRect((i*8)+1,59-(j*8), 1, 2, WHITE);
                display.fillRect((i*8)+2,58-(j*8), 1, 4, WHITE);
                display.fillRect((i*8)+3,57-(j*8), 2, 6, WHITE);
                display.fillRect((i*8)+5,57-(j*8), 2, 1, WHITE);
                display.fillRect((i*8)+5,59-(j*8), 2, 2, WHITE);
                display.fillRect((i*8)+5,62-(j*8), 2, 1, WHITE);
                break;
              case 5:
              if(!isImmune || immuneCt >= 900){
                display.fillRect(i*8,59-(j*8),1,2, WHITE);
                display.fillRect((i*8)+1,58-(j*8),2,4, WHITE);
                display.fillRect((i*8)+3,59-(j*8),1,2, WHITE);
                display.fillRect((i*8)+4,58-(j*8),1,4, WHITE);
                display.fillRect((i*8)+5,57-(j*8),1,6, WHITE);
                display.fillRect((i*8)+6,56-(j*8),2,8, WHITE);
                }
                else{
                display.fillRect(i*8,59-(j*8),1,2, WHITE);
                display.fillRect((i*8)+1,58-(j*8),2,1, WHITE);
                display.fillRect((i*8)+1,61-(j*8),2,1, WHITE);
                display.drawPixel((i*8)+4,58-(j*8),WHITE);
                display.drawPixel((i*8)+4,61-(j*8),WHITE);
                display.drawPixel((i*8)+5,57-(j*8),WHITE);
                display.drawPixel((i*8)+5,62-(j*8),WHITE);
                display.fillRect((i*8)+6,56-(j*8),2,1, WHITE);
                display.fillRect((i*8)+6,63-(j*8),2,1, WHITE);
                }
                break;
              case 7:
                display.fillRect((i*8)+1,59-(j*8),2,2, WHITE);
                display.fillRect((i*8)+3,58-(j*8),2,4, WHITE);
                display.fillRect((i*8)+5,57-(j*8),1,6, WHITE);
                break;
              case 8:
                display.fillRect((i*8)+1,59-(j*8), 1, 2, WHITE);
                display.fillRect((i*8)+2,57-(j*8), 1, 6, WHITE);
                display.fillRect((i*8)+3,58-(j*8), 2, 4, WHITE);
                display.fillRect((i*8)+5,59-(j*8), 2, 2, WHITE);
                break;
              case 9:
                display.fillRect((i*8)+2,57-(j*8), 2, 2, WHITE);
                display.fillRect((i*8)+2,61-(j*8), 2, 2, WHITE);
                display.fillRect((i*8)+3,59-(j*8), 3, 2, WHITE);
                display.drawPixel((i*8)+1,58-(j*8), WHITE);
                display.drawPixel((i*8)+1,61-(j*8), WHITE);
                display.drawPixel((i*8)+4,58-(j*8), WHITE);
                display.drawPixel((i*8)+4,61-(j*8), WHITE);
                display.drawPixel((i*8)+2,59-(j*8), WHITE);
                display.drawPixel((i*8)+2,60-(j*8), WHITE);
                break;
            }
             
        }
    }
    display.display();
}

void shoot(int** matrix, int rows, int cols) {
    for(int i = 0;i<cols;i++){
        if(matrix[rows-1][i]==5)
            planeLoc = i;
    }
if(bullet>0){
    if(matrix[rows-2][planeLoc] == 0){
        matrix[rows-3][planeLoc]=7;}
    else
       matrix[rows-3][planeLoc]-=1;
}
}

void addRandomRow(int** matrix, int& rows, int cols) {
    int* newRow = new int[cols];
     if(isImmune==true && immuneCt < 900){
        immuneCt += delayCt;
        Serial.println("immune");
        
    }
    else if(immuneCt>= 900){
        immuneCt = 0;
        isImmune = false;
    }
    for (int i = 0; i < cols; i++) {
        newRow[i] = 0;
    }
    rows++;
    matrix[rows-1] = newRow;
    for(int i = rows-2;i>-1;i--){
        matrix[i+1] = matrix[i];
    }
    for(int i = 0;i<rows;i++){
            for(int j = 0;j<cols;j++){
                if(matrix[i][j]==7){
                        matrix[i][j]=0;
                    if(matrix[i-2][j] == 0 && matrix[i-1][j] == 0)
                        matrix[i-2][j]=7;
                    else if(matrix[i-1][j] ==1)
                        matrix[i-1][j]=0;
                    else if(matrix[i-2][j] ==1)
                        matrix[i-2][j] =0;
                    else if(matrix[i-1][j] == 2){
                        if(matrix[i+1][j] == 7){
                        matrix[i-1][j]=0;
                        matrix[i+1][j]=0;}
                        else
                        matrix[i-1][j]-=1;

                        }
                    else if(matrix[i-2][j] ==2){
                        matrix[i-2][j] -=1;
                        }
                }
                }
    }

    if(digitalRead(30)==1 && bullet>0){
    shoot(matrix,rows,cols);
    bullet--;
    }
    
    for(int i = 0;i<cols;i++){
        if(matrix[rows-1][i]==5)
            planeLoc = i;
    }
    if(potValue<analogRead(potPin) && planeLoc !=7){
      potValue=analogRead(potPin);
      planeLoc+=1;}
    else if(potValue>analogRead(potPin) && planeLoc!=0){
      potValue=analogRead(potPin);
      planeLoc-=1;}
    if(matrix[rows-2][planeLoc]==0 || isImmune==true){
    matrix[rows-2][planeLoc]=5;
    }
    else if(matrix[rows-2][planeLoc]==1 || matrix[rows-2][planeLoc]==2){
        matrix[rows-2][planeLoc]=5;
        tone(buzzer, 1000);
        delay(30);
        noTone(buzzer);
        isImmune = true;
        immuneCt=0;
        if(health>0)
            health--;
        else{
          firstScreen();
        }
    }
    else if(matrix[rows-2][planeLoc]==9){
      matrix[rows-2][planeLoc]=5;
      if(health<3)
      health++;}
    else if(matrix[rows-2][planeLoc]==8){
      matrix[rows-2][planeLoc]=5;
      isImmune=true;
      tone(buzzer, 1000);
        delay(30);
        noTone(buzzer);
      immuneCt = 0;
    }

    for(int i = 0;i<cols;i++){
        if(matrix[rows-2][i]==1 || matrix[rows-2][i]==2)
            counter++;
    }
    int numOnes = random(0,cols);
    int prevIdx = -1;
    for (int i = 0; i < numOnes; i++) {
        int idx;
        idx = random(0,cols);
        int enemy = random(1,3);

        if(idx == 0 && newRow[idx+1]!=1 && newRow[idx+1]!=2)
            newRow[idx] = enemy;
        else if(idx == cols-1 && newRow[idx-1]!=1 && newRow[idx-1]!=2)
            newRow[idx] = enemy;
        else if(newRow[idx+1]!=1 && newRow[idx-1]!=1 && newRow[idx-1]!=2 && newRow[idx+1]!=2)
            newRow[idx] = enemy;
     }
    int idx = random(0,100);
    if(idx<6)
        newRow[numOnes]=8;
    else if(idx>10 && idx<17)
        newRow[numOnes] = 9;
       if(counter>=14){
           if(health<3)
           health++;
           if(bullet<3)
           bullet++;
           counter = counter%14;
    }
    
    Serial.print("health: ");
    Serial.println((int)health);
    Serial.print("Score: ");
    Serial.println((int)score);
    Serial.print("Bullet: ");
    Serial.println((int)bullet);
    Serial.println("**********");
    matrix[0] = newRow;
}

void removeLastRow(int** matrix, int& rows, int cols) {
    if (rows > 0) {
        free(matrix[rows - 1]);
        rows--;
    }
}
void gameScreen(){
  health = 3;
  bullet = 3;
  immuneCt = 0;
  counter = 0;
  isImmune = false;
  planeLoc = 4;
  score = 0;
  delayCt=300;
  const int ROWS = 16;
    const int COLS = 8;
    int** matrix = new int*[ROWS];
    int rows = 0;
    for (int i = 0; i < ROWS; i++) {
        int* row = new int[COLS];
        for (int j = 0; j < COLS; j++) {
            row[j] = 0;
        }
        matrix[i] = row;
        rows++;
    }
    matrix[ROWS-1][4]= 5;


    printMatrix(matrix, ROWS, COLS);

    while (true) {
      digitalWrite(31, HIGH);
      ldrValue = analogRead(A1);
      if(ldrValue>100)
      display.invertDisplay(true);
      else
      display.invertDisplay(false);
      if(gameMode == 1)
        delay(delayCt);
      else{
        delay(delayCt);
        totalCt += delayCt;
        if(totalCt>3000){
          totalCt = totalCt%3000;
          delayCt = (delayCt/10)*8;
        }
      }
        score++;
        putdownLed();
        displayLed(health,bullet);
        displayScore(score);
        addRandomRow(matrix, rows, COLS);
        removeLastRow(matrix, rows, COLS);
        printMatrix(matrix, ROWS, COLS);
      digitalWrite(31, LOW); 
    }

    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

void firstScreen(){
  int upB,downB,selectB;
  display.clearDisplay();
  //1
  display.fillRect(34,51,5,1, WHITE);
  display.fillRect(39,50,1,3, WHITE);
  display.drawPixel(35,52, WHITE);
  //1 clicked
  display.drawRect(32,48,10,7, WHITE);
  //2
  display.fillRect(34,19,1,2, WHITE);
  display.fillRect(35,18,2,1, WHITE);
  display.fillRect(35,21,2,1, WHITE);
  display.fillRect(39,18,1,4, WHITE);
  display.drawPixel(37,19, WHITE);
  display.drawPixel(38,20, WHITE);
  //2 clicked
  //display.drawRect(32,16,10,8, WHITE);
  //go
  display.fillRect(82,34,1,4, WHITE);
  display.fillRect(86,33,2,1, WHITE);
  display.fillRect(88,34,1,4, WHITE);
  display.fillRect(85,34,1,2, WHITE);
  display.fillRect(83,38,5,1, WHITE);
  display.drawRect(82,25,7,6,WHITE);

  //go clicked
  display.drawRect(80,21,11,22,WHITE);
  display.display();
  while(true){
    

    delay(300);
    upB = digitalRead(upButton);
    downB = digitalRead(downButton);
    selectB = digitalRead(selectButton);
    if(digitalRead(upButton)==1 || digitalRead(downButton)==1){
      Serial.print("Oyun Modu:  ");
      if(opt==1){
        opt=2;
        display.drawRect(32,48,10,7, BLACK);
        display.drawRect(32,16,10,8, WHITE);
        display.display();
        gameMode = 2;  
        }
      else{
        display.drawRect(32,48,10,7, WHITE);
        display.drawRect(32,16,10,8, BLACK);
        display.display();
      opt=1;
      gameMode=1;
      }
    Serial.println(gameMode);
    }
    else if(digitalRead(selectButton)==1){
      gameScreen();
    }
  }
}

void setup(){
  pinMode(31,OUTPUT);
  pinMode(A1,INPUT);
  pinMode(shootButton,INPUT);
  pinMode(downButton,INPUT);
  pinMode(upButton,INPUT);
  pinMode(selectButton,INPUT);
  pinMode (buzzer, OUTPUT);
  Serial.begin(115200);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)){ 
  Serial.println("SSD1306 allocation failed");
  for(;;);
}
delay(1000);
 for(int i=0;i<health+bullet;i++)
  {
  pinMode(led[i],OUTPUT);
 }
pinMode (LATCH, OUTPUT);
   pinMode(DATA, OUTPUT);
    pinMode(CLK, OUTPUT);
     pinMode(MR, OUTPUT);
     digitalWrite(MR, LOW);
      digitalWrite(MR, HIGH);
pinMode(potPin,INPUT);
potValue = analogRead(potPin);


firstScreen();
//gameScreen();
randomSeed(analogRead(5));

    
}
void loop() {

}